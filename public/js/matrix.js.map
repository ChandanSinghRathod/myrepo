{"version":3,"sources":["matrix.js"],"names":["$","ip2","val","ip3","ip4","createMatrixIp2","split","createMatrixIp3","createMatrixIp4","headerTr","tri","length","headerTrValue","headerTrFirstValue","splice","join","plValue","replace","append","tdi","colValue","colFirstValue","dtTr","tdj","dtValue","dtFirstValue","valuesTable","tablei","seqValue","dtSeqValue","sumUp","parseInt","processIP","push","createMatrix","searchText","searchedValue","processi","extractValue","firstValue","secondValue","trim","sort","a","b","lhs","reverse","shadei","afterDot","substr","indexOf","css","getRandomColor","html","letters","color","i","Math","floor","random","jQuery"],"mappings":";CAAA,SAAWA,GAUJ,IARCC,IAAAA,EAAMD,EAAE,QAAQE,MAChBC,EAAMH,EAAE,QAAQE,MAChBE,EAAMJ,EAAE,QAAQE,MAChBG,EAAkBJ,EAAIK,MAAM,KAC5BC,EAAkBJ,EAAIG,MAAM,KAC5BE,EAAkBJ,EAAIE,MAAM,KAE9BG,EAAW,uCACNC,EAAM,EAAGA,EAAML,EAAgBM,OAAQD,IAAO,CAC/CE,IACAC,EADgBR,EAAgBK,GAAKJ,MAAM,KACRQ,OAAO,EAAG,GAAGC,KAAK,IACrDC,EAAUH,EAAmBI,QAAQ,KAAM,IACjDR,GAAyCI,mBAAAA,OAAAA,EAAwBG,OAAAA,OAAAA,EAAjE,SAEFhB,EAAE,iBAAiBkB,OAAOT,EAAW,SAEhC,IAAA,IAAIU,EAAM,EAAGA,EAAMZ,EAAgBI,OAAQQ,IAAO,CAKhD,IAJCC,IACAC,EADWd,EAAgBY,GAAKb,MAAM,KACbQ,OAAO,EAAG,GAAGC,KAAK,IAE7CO,EAA0BD,mBAAAA,OAAAA,EAA9B,SACSE,EAAM,EAAGA,EAAMlB,EAAgBM,OAAQY,IAAO,CAC/CC,IACAC,EADUpB,EAAgBkB,GAAKjB,MAAM,KACdQ,OAAO,EAAG,GAAGC,KAAK,IAC/CO,GAA4BD,cAAAA,OAAAA,GAAgBI,OAAAA,EAA5C,WAEFzB,EAAE,iBAAiBkB,OAPR,OAOoBI,EAAO,SAInC,IADDI,IAAAA,EAAc,GACTC,EAAS,EAAGA,EAAStB,EAAgBM,OAAQgB,IAAU,CACxDC,IACAC,EADWxB,EAAgBsB,GAAQrB,MAAM,KACnBQ,OAAO,EAAG,GAAGC,KAAK,IAAIE,QAAQ,KAAM,IAC1Da,EAASC,SAASC,EAAU3B,EAAiB,KAAOwB,IAAeE,SAASC,EAAUzB,EAAiB,IAAMsB,IAAeE,SAASC,EAAUxB,EAAiB,KAAOqB,IAC7KH,EAAYO,KAAKH,EAAQ,IAAMD,GAWxBG,SAAAA,EAAWE,EAAcC,GAE3B,IADDC,IAAAA,EACKC,EAAW,EAAGA,EAAWH,EAAavB,OAAQ0B,IAAY,CAC7DC,IAAAA,EAAeJ,EAAaG,GAAU/B,MAAM,KAC5CiC,EAAaD,EAAaxB,OAAO,EAAG,GAAGC,KAAK,IAC5CyB,EAAcF,EAAa,GAC3BH,GAAAA,IAAeI,EAAWE,OAAQ,CACpCL,EAAgBI,EAChB,OAGGJ,OAAAA,EAnBTV,EAAYgB,KAAK,SAAUC,EAAGC,GAGpBC,OAFEd,SAASY,EAAE1B,QAAQ,KAAM,KACzBc,SAASa,EAAE3B,QAAQ,KAAM,OAIrCS,EAAYoB,UAgBP,IAAA,IAAIC,EAAS,EAAGA,EAASrB,EAAYf,OAAQoC,IAAU,CACtDC,IAAAA,EAAWtB,EAAYqB,GAAQE,OAAOvB,EAAYqB,GAAQG,QAAQ,KAAO,GAC7ElD,EAAE,KAAOgD,EAAW,KAAOA,GAAUG,IAAI,mBAAoBC,KAC7DpD,EAAE,KAAOgD,EAAW,KAAOA,GAAUK,KAAK,KAAON,GAG1CK,SAAAA,IAGF,IAFDE,IACAC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHY,mBAGKE,KAAKC,MAAsB,GAAhBD,KAAKE,WAE5BJ,OAAAA,GAzEX,CA4EGK","file":"matrix.js","sourceRoot":"../src","sourcesContent":["(function ($) {\n  // create matrix table\n  const ip2 = $('#ip2').val();\n  const ip3 = $('#ip3').val();\n  const ip4 = $('#ip3').val();\n  const createMatrixIp2 = ip2.split(',');\n  const createMatrixIp3 = ip3.split(',');\n  const createMatrixIp4 = ip4.split(',');\n  // create table header\n  var headerTr = '<tr><th scope=\"col\">Locale(IP3)</th>';\n  for (var tri = 0; tri < createMatrixIp2.length; tri++) {\n    const headerTrValue = createMatrixIp2[tri].split('=');\n    const headerTrFirstValue = headerTrValue.splice(0, 1).join('');\n    const plValue = headerTrFirstValue.replace('pl', '');\n    headerTr = headerTr + `<th scope=\"col\">${headerTrFirstValue},Br${plValue}</th>`;\n  }\n  $('.matrix-table').append(headerTr + '</tr>');\n\n  for (var tdi = 0; tdi < createMatrixIp3.length; tdi++) {\n    const colValue = createMatrixIp3[tdi].split('=');\n    const colFirstValue = colValue.splice(0, 1).join('');\n    const tr = '<tr>';\n    var dtTr = `<th scope=\"row\">${colFirstValue}</th>`;\n    for (var tdj = 0; tdj < createMatrixIp2.length; tdj++) {\n      const dtValue = createMatrixIp2[tdj].split('=');\n      const dtFirstValue = dtValue.splice(0, 1).join('');\n      dtTr = dtTr + `<td class=\"${colFirstValue}${dtFirstValue}\"></td>`;\n    }\n    $('.matrix-table').append(tr + dtTr + '</tr>');\n  }\n\n  var valuesTable = [];\n  for (var tablei = 0; tablei < createMatrixIp2.length; tablei++) {\n    const seqValue = createMatrixIp2[tablei].split('=');\n    const dtSeqValue = seqValue.splice(0, 1).join('').replace('pl', '');\n    const sumUp = (parseInt(processIP(createMatrixIp2, 'pl' + dtSeqValue)) + parseInt(processIP(createMatrixIp3, 'l' + dtSeqValue)) + parseInt(processIP(createMatrixIp4, 'br' + dtSeqValue)));\n    valuesTable.push(sumUp + '.' + dtSeqValue);\n  }\n  // Removing the commas. You can add more characters to remove to the set\n  valuesTable.sort(function (a, b) {\n    var lhs = parseInt(a.replace(/,/g, ''));\n    var rhs = parseInt(b.replace(/,/g, ''));\n    return (lhs - rhs);\n  });\n\n  valuesTable.reverse();\n\n  function processIP (createMatrix, searchText) {\n    var searchedValue;\n    for (var processi = 0; processi < createMatrix.length; processi++) {\n      var extractValue = createMatrix[processi].split('=');\n      var firstValue = extractValue.splice(0, 1).join('');\n      var secondValue = extractValue[0];\n      if (searchText === firstValue.trim()) {\n        searchedValue = secondValue;\n        break;\n      }\n    }\n    return searchedValue;\n  }\n  // shade\n  for (var shadei = 0; shadei < valuesTable.length; shadei++) {\n    var afterDot = valuesTable[shadei].substr(valuesTable[shadei].indexOf('.') + 1);\n    $('.l' + afterDot + 'pl' + afterDot).css('background-color', getRandomColor());\n    $('.l' + afterDot + 'pl' + afterDot).html('pr' + shadei);\n  }\n  // random color codes\n  function getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n})(jQuery);\n"]}