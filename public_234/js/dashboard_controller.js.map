{"version":3,"sources":["utils/index.js","dashboard_controller.js"],"names":["parseJwt","base64Url","base64","document","querySelector","getAttribute","split","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","validateUploadStatus","uploadedRows","failedRows","$","username","password","uploadURLBase","downloadURLBase","dashboardURLBase","failedRowsURLBase","ajax","url","method","dataType","crossDomain","xhrFields","withCredentials","beforeSend","xhr","setRequestHeader","btoa","success","response","srNo","i","length","colorIndicator","parseInt","numRows","td1","td2","uploadedTime","td3","bulkFileName","td4","successRows","append","click","html","$container","on","$csvFile","fileSelected","prop","$uploadMessage","val","formData","FormData","$uploadButton","find","data","processData","contentType","status","setTimeout","message","window","open","error","err","eval","responseText","alert","jqXHR","attr","uploadId","content","transactionId","hiddenElement","createElement","href","encodeURI","target","download"],"mappings":"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","file":"dashboard_controller.js","sourceRoot":"../src","sourcesContent":["export function parseJwt () {\n  const base64Url = document.querySelector('meta[name=\"apiToken\"]').getAttribute('content').split('.')[1];\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n  return JSON.parse(jsonPayload);\n}\n\nexport function validateUploadStatus (uploadedRows, failedRows) {\n  if (failedRows === 0) {\n    return JSON.parse('{ \"colorIndicator\":\"text-success\"}');\n  } else if (uploadedRows === failedRows) {\n    return JSON.parse('{ \"colorIndicator\":\"text-danger\"}');\n  } else {\n    return JSON.parse('{ \"colorIndicator\":\"text-warning\"}');\n  }\n}\n","import { parseJwt, validateUploadStatus } from './utils/index';\n\n$(() => {\n  const {\n    username,\n    password,\n    uploadURLBase,\n    downloadURLBase,\n    dashboardURLBase,\n    failedRowsURLBase\n  } = parseJwt();\n\n  // loading uploaded bulk files row data\n  $.ajax({\n    url: dashboardURLBase,\n    method: 'GET',\n    dataType: 'json',\n    crossDomain: true,\n    xhrFields: { withCredentials: true },\n    beforeSend (xhr) {\n      xhr.setRequestHeader('Authorization', `Basic ${btoa(`${username}:${password}`)}`);\n    },\n    success (response) {\n      // setting dashboard data\n      let srNo = 1;\n      for (let i = 0; i < response.length; i++) {\n        const { colorIndicator } = validateUploadStatus(parseInt(response[i].numRows), parseInt(response[i].failedRows));\n        const tr = '<tr>';\n        const td1 = `<td>${srNo}</td>`;\n        const td2 = `<td>${response[i].uploadedTime}</td>`;\n        const td3 = `<td><a href='#' bulkFileName='${response[i].bulkFileName}' class='stretched-link s3-download'>${response[i].bulkFileName}</a></td>`;\n        const td4 = `<td><a href='#' numRows='${response[i].numRows}' uploadId='${response[i].bulkFileName}' failedRows='${response[i].failedRows}' successRows='${response[i].successRows}' class='stretched-link details-page ${colorIndicator}'>Processed</a></td></tr>`;\n        $('.dashboard-table').append(tr + td1 + td2 + td3 + td4);\n        srNo += 1;\n      }\n    }\n  });\n\n  // creating bulk csv upload panel\n  $('.csv-file-upload').click(() => {\n    $('#csv-container').html('<div class=\"container pt-6\"><div class=\"form-group\"><span class=\"text-center text-danger upload_message\"></span><br/><label for=\"CSV File\">Transaction CSV File</label><input type=\"file\" accept=\".csv\" class=\"form-control-file\" id=\"browsed-csv-file\"></div><button type=\"button\" id=\"upload_button\" class=\"btn btn-primary\">Upload</button></div>');\n  });\n\n  const $container = $('#csv-container');\n\n  // upload bulk csv file\n  $container.on('click', '#upload_button', () => {\n    const $csvFile = $('#browsed-csv-file');\n    const fileSelected = $csvFile.prop('files')[0];\n    const $uploadMessage = $('.upload_message');\n\n    if ($csvFile.val() === '') {\n      $uploadMessage.html('File is not selected');\n      return;\n    }\n\n    const formData = new FormData();\n    const $uploadButton = $container.find('#upload_button');\n\n    formData.append('bulkFile', fileSelected);\n    $uploadMessage.html('Processing');\n    $uploadButton.html('Uploading').prop('disabled', true);\n\n    // GETTING STARTED\n    $.ajax({\n      url: uploadURLBase,\n      method: 'POST',\n      data: formData,\n      crossDomain: true,\n      xhrFields: { withCredentials: true },\n      beforeSend (xhr) {\n        xhr.setRequestHeader('Authorization', `Basic ${btoa(`${username}:${password}`)}`);\n      },\n      processData: false,\n      contentType: false,\n      success: function (response) {\n        // validate response\n        if (response.status === 'UPLOAD-SUCCESS') {\n          return setTimeout(() => {\n            $('.upload_message').html(response.message);\n            window.open('/bulk-payments-frontend/', '_self');\n          }, 5000);\n        }\n\n        $('.upload_message').html(response.message);\n        $uploadButton.html('Upload');\n        $uploadButton.prop('disabled', false);\n      },\n      error: function (xhr) {\n        // eslint-disable-next-line no-eval\n        const err = eval(`(${xhr.responseText})`); // FIXME: Remove use of `eval` as it's considered really bad.\n        $('.upload_message').html(err.message);\n        $uploadButton.html('Upload').prop('disabled', false);\n      }\n    });\n  });\n\n  // request logout\n  $('.logout').click(() => {\n    $.ajax({\n      url: '/bulk-payments-frontend/logout',\n      method: 'GET',\n      contentType: 'application/json',\n      success: function (response) {\n        // logout message\n        if (response.status === 'success') {\n          return window.open('/bulk-payments-frontend/', '_self');\n        }\n\n        alert(response.message);\n      },\n      error (jqXHR, error) {\n        alert(error);\n      }\n    });\n  });\n\n  // Details page\n  $container.on('click', '.details-page', function () {\n    const numRows = $(this).attr('numRows');\n    const failedRows = $(this).attr('failedRows');\n    const successRows = $(this).attr('successRows');\n    const uploadId = $(this).attr('uploadId');\n    $container.html(\n      `<div class=\"card mt-3\"><h5 class=\"card-header\">Details page</h5><div class=\"card-body\"><h5 class=\"card-title\">Number of payments in file</h5><p class=\"card-text text-success\">${numRows}</p><h5 class=\"card-title\">Number of successfully processed</h5><p class=\"card-text text-success\">${successRows} row(s)</p>  <h5 class=\"card-title\">Number of errors</h5><a href='#' class=\"display-failed-rows\" uploadId='${uploadId}'><p class=\"card-text text-danger\">${failedRows} row(s) <span style='padding-left:30px;'>View error details</span></p></a></div></div>`\n    );\n  });\n\n  // display failed rows\n  $container.on('click', '.display-failed-rows', function () {\n    const uploadId = $(this).attr('uploadId');\n    // GETTING STARTED\n    $.ajax({\n      url: `${failedRowsURLBase}/${uploadId}`,\n      method: 'GET',\n      crossDomain: true,\n      xhrFields: { withCredentials: true },\n      beforeSend: function (xhr) {\n        xhr.setRequestHeader('Authorization', `Basic ${btoa(`${username}:${password}`)}`);\n      },\n      processData: false,\n      contentType: false,\n      success: function (response) {\n        // listing failed rows\n        let content = '<table class=\"table table-striped\"><tr><th>Sr. No</th><th>Transaction ID</th><th>Message</th></tr>';\n        let srNo = 1;\n        for (let i = 0; i < response.length; i++) {\n          content += `<tr><td>${srNo}</td><td>${response[i].transactionId}</td><td>${response[i].message}</td></tr>`;\n          srNo += 1;\n        }\n        content += '</table>';\n        $container.html(content);\n      },\n      error: function () {\n        alert('Failed to retrieve details on the failed rows');\n      }\n    });\n  });\n\n  // s3 download\n  $container.on('click', '.s3-download', function () {\n    const bulkFileName = $(this).attr('bulkFileName');\n    // GETTING STARTED\n    $.ajax({\n      url: `${downloadURLBase}/${bulkFileName}`,\n      method: 'GET',\n      crossDomain: true,\n      xhrFields: { withCredentials: true },\n      beforeSend: function (xhr) {\n        xhr.setRequestHeader('Authorization', `Basic ${btoa(`${username}:${password}`)}`);\n      },\n      processData: false,\n      contentType: false,\n      success: function (response) {\n        const hiddenElement = document.createElement('a');\n        hiddenElement.href = `data:text/csv;charset=utf-8,${encodeURI(response)}`;\n        hiddenElement.target = '_blank';\n        hiddenElement.download = bulkFileName;\n        hiddenElement.click();\n      },\n      error: function () {\n        alert('Failed to download stored files');\n      }\n    });\n  });\n})();\n"]}