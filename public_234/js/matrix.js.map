{"version":3,"sources":["matrix.js"],"names":["$","i","tr","td1","td2","td3","td4","td5","td6","append","ip2","val","ip3","createMatrixIp2","split","createMatrixIp3","valuesTable","length","sumUp","parseInt","processIP","push","createMatrix","searchText","searchedValue","extractValue","firstValue","splice","join","secondValue","trim","sort","a","b","lhs","replace","reverse","afterDot","substr","indexOf","css","html","jQuery"],"mappings":";CAAA,SAAWA,GAEJ,IAAA,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpBC,IACAC,EAA0BF,oBAAAA,OAAAA,EAAhC,SACMG,EAAqBH,eAAAA,OAAAA,EAA3B,cACMI,EAAqBJ,eAAAA,OAAAA,EAA3B,cACMK,EAAqBL,eAAAA,OAAAA,EAA3B,cACMM,EAAqBN,eAAAA,OAAAA,EAA3B,cACMO,EAAqBP,eAAAA,OAAAA,EAA3B,mBACAD,EAAE,iBAAiBS,OAPR,OAOoBN,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,GAS1D,IANCE,IAAAA,EAAMV,EAAE,QAAQW,MAChBC,EAAMZ,EAAE,QAAQW,MAEhBE,EAAkBH,EAAII,MAAM,KAC5BC,EAAkBH,EAAIE,MAAM,KAC9BE,EAAc,GACTf,EAAI,EAAGA,GAAKY,EAAgBI,OAAQhB,IAAK,CAC1CiB,IAAAA,EAASC,SAASC,EAAUP,EAAiB,KAAOZ,IAAMkB,SAASC,EAAUL,EAAiB,IAAMd,IAC1Ge,EAAYK,KAAKH,EAAQ,IAAMjB,GAWxBmB,SAAAA,EAAWE,EAAcC,GAE3B,IADDC,IAAAA,EACKvB,EAAI,EAAGA,EAAIqB,EAAaL,OAAQhB,IAAK,CACxCwB,IAAAA,EAAeH,EAAarB,GAAGa,MAAM,KACrCY,EAAaD,EAAaE,OAAO,EAAG,GAAGC,KAAK,IAC5CC,EAAcJ,EAAa,GAC3BF,GAAAA,IAAeG,EAAWI,OAAQ,CACpCN,EAAgBK,EAChB,OAGGL,OAAAA,EAnBTR,EAAYe,KAAK,SAASC,EAAEC,GAGlBC,OAFEf,SAASa,EAAEG,QAAQ,KAAK,KACxBhB,SAASc,EAAEE,QAAQ,KAAK,OAIpCnB,EAAYoB,UAgBP,IAAInC,EAAE,EAAGA,EAAEe,EAAYC,OAAOhB,IAAI,CACjCoC,IAAAA,EAAWrB,EAAYf,GAAGqC,OAAQtB,EAAYf,GAAGsC,QAAQ,KAAO,GACpEvC,EAAE,KAAKqC,EAAS,KAAKA,GAAUG,IAAI,mBAAoB,OACvDxC,EAAE,KAAKqC,EAAS,KAAKA,GAAUI,KAAK,KAAKxC,IAjD7C,CAmDGyC","file":"matrix.js","sourceRoot":"../src","sourcesContent":["(function ($) {\n  // create matrix table\n  for (let i = 1; i < 6; i++) {\n    const tr = '<tr>';\n    const td1 = `<th scope=\"row\">l${i}</th>`;\n    const td2 = `<td class=\"l${i}pl1\"></td>`;\n    const td3 = `<td class=\"l${i}pl2\"></td>`;\n    const td4 = `<td class=\"l${i}pl3\"></td>`;\n    const td5 = `<td class=\"l${i}pl4\"></td>`;\n    const td6 = `<td class=\"l${i}pl5\"></td></tr>`;\n    $('.matrix-table').append(tr + td1 + td2 + td3 + td4 + td5 + td6);\n  }\n\n  const ip2 = $('#ip2').val();\n  const ip3 = $('#ip3').val();\n\n  const createMatrixIp2 = ip2.split(',');\n  const createMatrixIp3 = ip3.split(',');\n  var valuesTable = [];\n  for (var i = 1; i <= createMatrixIp2.length; i++) {\n    const sumUp = (parseInt(processIP(createMatrixIp2, 'pl' + i)) + parseInt(processIP(createMatrixIp3, 'l' + i)));\n    valuesTable.push(sumUp + '.' + i);\n  }\n  // Removing the commas. You can add more characters to remove to the set\n  valuesTable.sort(function(a,b){\n    var lhs = parseInt(a.replace(/,/g,\"\"));\n    var rhs = parseInt(b.replace(/,/g,\"\"));\n    return( lhs - rhs);\n  });\n\n  valuesTable.reverse();\n\n  function processIP (createMatrix, searchText) {\n    var searchedValue;\n    for (var i = 0; i < createMatrix.length; i++) {\n      var extractValue = createMatrix[i].split('=');\n      var firstValue = extractValue.splice(0, 1).join('');\n      var secondValue = extractValue[0];\n      if (searchText === firstValue.trim()) {\n        searchedValue = secondValue;\n        break;\n      }\n    }\n    return searchedValue;\n  }\n  // shade\n   for(var i=0; i<valuesTable.length;i++){\n    var afterDot = valuesTable[i].substr( valuesTable[i].indexOf('.') + 1 );\n    $('.l'+afterDot+'pl'+afterDot).css('background-color', 'red');\n    $('.l'+afterDot+'pl'+afterDot).html('pr'+i);\n   }\n})(jQuery);\n"]}